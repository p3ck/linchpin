/**
 * CI Stage Linchpin Merge
 *
 * This is a declarative pipeline for the CI linchpin pipeline
 * that includes the building of images based on PRs
 *
 */

import groovy.json.JsonOutput

// Openshift project
openshiftProject = "continuous-infra"
topic = env.topic ?: 'org.centos.prod'
env.MSG_PROVIDER = 'fedora-fedmsg'

// Defaults for SCM operations
env.ghprbGhRepository = env.ghprbGhRepository ?: 'p3ck/linchpin'
env.ghprbActualCommit = env.ghprbActualCommit ?: 'github_merge'
env.ghprbPullId = env.ghprbPullId ?: '8'

def libraries = ['ci-pipeline'  : ['master', 'https://github.com/openshift/contra-lib.git']
                ]

    libraries.each { name, repo ->
        library identifier: "${name}@${repo[0]}",
                retriever: modernSCM([$class: 'GitSCMSource',
                                      remote: repo[1]])
    }

@Library('contra-lib')
import org.centos.contra.pipeline.GitHubAPI


properties([
  buildDiscarder(logRotator(artifactNumToKeepStr: '20', numToKeepStr: '20')),
  [$class: 'GithubProjectProperty', displayName: '', projectUrlStr: 'https://github.com/CentOS-PaaS-SIG/linchpin/'],
  [$class: 'org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty', triggers:[
    [
      $class: 'org.jenkinsci.plugins.ghprb.GhprbTrigger',
      orgslist: 'CentOS-PaaS-SIG',
      cron: 'H/5 * * * *',
      triggerPhrase: '.*\\[merge\\].*',
      onlyTriggerPhrase: true,
      useGitHubHooks: true,
      permitAll: true,
      autoCloseFailedPullRequests: false,
      displayBuildErrorsOnDownstreamBuilds: true,
      extensions: [
        [
          $class: 'org.jenkinsci.plugins.ghprb.extensions.status.GhprbSimpleStatus',
          commitStatusContext: 'Merge PR',
          showMatrixStatus: false,
          triggeredStatus: 'Starting job...',
          startedStatus: 'merging...',
        ]
      ]
    ]
  ]]
])

pipeline {
    agent none
    stages {
        stage("ci-linchpin-GHPR-merge") {
            steps {
                node('master') {
                    lock('merge-and-image-rebuild-lock') {
                        script {
                            // need this for ghprb plugin since it is really a post
                            // build step and it assumes the build is complete.
                            currentBuild.result = 'SUCCESS'
                        }
                        script {
                            withCredentials([string(credentialsId: 'paas-bot', variable: 'GH_TOKEN')]) {
                                def github = new GitHubAPI(username: 'paas-bot',
                                                           password: GH_TOKEN,
                                                           repo: env.ghprbGhRepository)
                                int pull_id = env.ghprbPullId as Integer
                                pull_request = github.mergePRByNumber(pull_id,
                                                                      'Merged by Jenkins')
                                // merge_commit_sha = pull_request.getMergeCommitSha()
                            }
                        }
                        script {
                            println "merge_commit_sha=${merge_commit_sha} ghprbActualCommit=${env.ghprbActualCommit}"
                            mTopic = "${topic}.ci.linchpin.pr_merge.queued"
                            mProperties = "topic=${topic}.ci.linchpin.pr_merge.queued\n" +
                                "ghprbActualCommit=${env.ghprbActualCommit}\n" +
                                "ghprbPullId=${env.ghprbPullId}\n" +
                                "ghprbPullAuthorLogin=${env.ghprbPullAuthorLogin}\n" +
                                "sha1=${env.sha1}"
                            mContent = [
                                "topic": "${topic}.ci.linchpin.pr_merge.queued",
                                "ghprbActualCommit": env.ghprbActualCommit,
                                "ghprbPullId": env.ghprbPullId,
                                "ghprbPullAuthorLogin": env.ghprbPullAuthorLogin,
                                "sha1": env.sha1
                            ]
                            mContentString = JsonOutput.toJson(mContent)
                            pipelineUtils.sendMessage(mTopic, mProperties, mContentString)
                        }
                        build job: 'ci-linchpin-merge',
                            parameters: [
                                    string(name: 'ghprbActualCommit',
                                           value: "${env.ghprbActualCommit}"),
                                    string(name: 'ghprbPullId',
                                           value: "${env.ghprbPullId}"),
                                    string(name: 'ghprbGhRepository',
                                           value: "${env.ghprbGhRepository}"),
                                    string(name: 'ghprbPullAuthorLogin',
                                           value: "${env.ghprbPullAuthorLogin}"),
                                    string(name: 'sha1',
                                           value: "${env.sha1}")
                            ],
                            wait: true
                    }
                }
            }
        }
        stage("cd-linchpin-check-and-release") {
            steps {
                node('master') {
                    dir('linchpin') {
                        checkout([$class: 'GitSCM',
                            branches: [[name: env.ghprbActualCommit]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions                       : [
                                [$class: 'ChangelogToBranch',
                                    options: [compareRemote: 'origin',
                                    compareTarget: 'cd_release_trigger'] // CHANGEME
                                ]
                            ],
                            submoduleCfg                     : [],
                            userRemoteConfigs                : [
                                [refspec:
                                         '+refs/heads/*:refs/remotes/origin/*  +refs/pull/*:refs/remotes/origin/pr/* ',
                                 url: "https://github.com/${env.ghprbGhRepository}"]]
                        ])
                        script {
                            if (getChangedFile('linchpin/version.py')) {

                                string pre_release = sh (
                                    script: "grep __version__ linchpin/version.py | grep -E '([[:digit:]]\\.){2}[[:digit:]][[:alpha:]][[:digit:]]' | awk -F\"= \" '{print \$2}'",
                                    returnStdout: true).trim()


                                // make sure to put this to == before merging
                                // the regex checks if __version__ = '1.6.2a1' or the like.
                                // if __version__ matches this, do nothing
                                // if __version__ returns blank, we have good confidence
                                // it's a full release version.
                                // cd-linchpin-release will attempt a release
                                //if (pre_release == "") {
                                if ("1" == "0") {
                                    build job: 'cd-linchpin-release',
                                        parameters: [
                                                string(name: 'ghprbActualCommit',
                                                       value: "${merge_commit_sha}"),
                                                string(name: 'ghprbGhRepository',
                                                       value: "${env.ghprbGhRepository}"),
                                        ],
                                        wait: true

                                }
                            }
                        }
                    }
                }
            }
        }
    }
}


// check the filePath against changed files
// return file.path if there's a match, else false
def getChangedFile(String filePath) {

    def changeLogSets = currentBuild.changeSets
    sz = changeLogSets.size()
    for (int i = 0; i < sz; i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            def files = new ArrayList(entry.affectedFiles)
            for (int k = 0; k <files.size(); k++) {
                def file = files[k]
                if (file.path == filePath) {
                    return file.path
                }
            }
        }
    }
    return false
}
